-- 1. Add a new UUID column for product_id
ALTER TABLE order_items ADD COLUMN new_product_id uuid;

-- 2. Backfill new_product_id using products.id (UUID) or products.old_id (integer)
UPDATE order_items oi
SET new_product_id = p.id
FROM products p
WHERE 
  p.id::text = oi.product_id
  OR (p.old_id IS NOT NULL AND p.old_id::text = oi.product_id);

-- 3. (Optional but recommended) Delete any order_items that could not be mapped to a valid product UUID
DELETE FROM order_items WHERE new_product_id IS NULL;

-- 4. Drop old foreign key (if exists), drop old product_id column, and rename new column
ALTER TABLE order_items DROP CONSTRAINT IF EXISTS order_items_product_id_fkey;
ALTER TABLE order_items DROP COLUMN product_id;
ALTER TABLE order_items RENAME COLUMN new_product_id TO product_id;

-- 5. Set product_id column to NOT NULL (if desired)
ALTER TABLE order_items ALTER COLUMN product_id SET NOT NULL;

-- 6. Add new foreign key constraint
ALTER TABLE order_items
  ADD CONSTRAINT order_items_product_id_fkey
  FOREIGN KEY (product_id) REFERENCES products(id);

-- 7. (Optional) Create an index for faster lookups
CREATE INDEX IF NOT EXISTS idx_order_items_product_id ON order_items(product_id); 